// Code generated by MockGen. DO NOT EDIT.
// Source: internal/lib/email/sender.go
//
// Generated by this command:
//
//	mockgen -source=internal/lib/email/sender.go -destination=internal/mocks/utilmocks/sender.go -package=utilmocks
//

// Package utilmocks is a generated GoMock package.
package utilmocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendResetPasswordEmail mocks base method.
func (m *MockSender) SendResetPasswordEmail(toEmail, resetToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendResetPasswordEmail", toEmail, resetToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordEmail indicates an expected call of SendResetPasswordEmail.
func (mr *MockSenderMockRecorder) SendResetPasswordEmail(toEmail, resetToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordEmail", reflect.TypeOf((*MockSender)(nil).SendResetPasswordEmail), toEmail, resetToken)
}
